#Workflow to deploy docker image
name: CI

on:
  push:
    branches:
      - 'main'
jobs:
  docker-build:
    runs-on: ubuntu-latest
    env:
     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2 
        #Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2        
        with:
          node-version: ${{ matrix.node-version }}        
      - working-directory: ./client
        run: npm install
      - working-directory: ./client
        run: npm run build --if-present
      - working-directory: ./client
        run: npm test -- --coverage
      #Docker
      -
        name: Set up QEMU
        if: ${{ success() }}
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        if:  ${{ success() }}
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if:  ${{ success() }}
        uses: docker/login-action@v1 
        with:
          username:   ${{ secrets.DOCKER_USERNAME }}
          password:   ${{ secrets.DOCKER_PASSWORD }}         
      - 
        name: Build client image and push Docker image
        if:  ${{ success() }}
        id: docker_build_client
        uses: docker/build-push-action@v2.3.0        
        with:        
          repository: ldcamachoc/multi-docker-git-actions
          context: ./client   
          tags: ldcamachoc/multi-docker-client:1.0.0,ldcamachoc/multi-docker-client:latest
          push: true
      - 
        name: Build nginx image and push Docker image
        if:  ${{ success() }}
        id: docker_build_nginx
        uses: docker/build-push-action@v2.3.0        
        with:        
          repository: ldcamachoc/multi-nginx-git-actions
          context: ./nginx   
          tags: ldcamachoc/multi-docker-nginx:1.0.0,ldcamachoc/multi-docker-nginx:latest
          push: true
      - 
        name: Build server image and push Docker image
        if:  ${{ success() }}
        id: docker_build_server
        uses: docker/build-push-action@v2.3.0        
        with:        
          repository: ldcamachoc/multi-server-git-actions
          context: ./server   
          tags: ldcamachoc/multi-docker-server:1.0.0,ldcamachoc/multi-docker-server:latest
          push: true      
      - 
        name: Build worker image and push Docker image
        if:  ${{ success() }}
        id: docker_build_worker
        uses: docker/build-push-action@v2.3.0        
        with:        
          repository: ldcamachoc/multi-docker-git-actions
          context: ./worker   
          tags: ldcamachoc/multi-docker-worker:1.0.0,ldcamachoc/multi-docker-worker:latest
          push: true            
            
      #AWS
      - 
        name: Generate deployment package
        if: ${{ success() }}
        run: zip -r deploy.zip ./Dockerrun.aws.json
      
     
      - name: Get Timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run String Replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: "-"
          flags: "g"
      
      - name: Install Dependencies & Deploy to AWS
        if:  ${{ success() }}
        run: |
          sudo npm install -g beanstalk-deploy --unsafe-perm
          sudo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}} beanstalk-deploy "multi-docker-app" "Multidockerapp-env" "deploy-${{ steps.format-time.outputs.replaced }}" "us-east-1" deploy.zip


      # - name: Install Dependencies & Deploy to AWS
      #   run: |
      #     sudo npm install -g beanstalk-deploy --unsafe-perm
      #     sudo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}} beanstalk-deploy "docker-react-app-6" "Dockerreactapp6-env" "docker-react-${{ steps.format-time.outputs.replaced }}" "us-east-1" deploy.zip
